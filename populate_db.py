# populate_db.py
# Execute este arquivo no shell do Django: python manage.py shell
# Em seguida, copie e cole este cÃ³digo

from App.models import User, Status, Task

def populate_database():
    """
    Popula o banco de dados com dados iniciais para testar o dashboard
    """
    
    # Criar status padrÃ£o
    print("Criando status padrÃ£o...")
    status_pendente, created = Status.objects.get_or_create(name="Pendente")
    if created:
        print("- Status 'Pendente' criado")
    
    status_andamento, created = Status.objects.get_or_create(name="Em Andamento") 
    if created:
        print("- Status 'Em Andamento' criado")
    
    status_concluida, created = Status.objects.get_or_create(name="ConcluÃ­da")
    if created:
        print("- Status 'ConcluÃ­da' criado")
    
    # Criar usuÃ¡rios de exemplo
    print("\nCriando usuÃ¡rios de exemplo...")
    user1, created = User.objects.get_or_create(
        username="joao",
        defaults={'password': '123456'}
    )
    if created:
        print("- UsuÃ¡rio 'joao' criado")
    
    user2, created = User.objects.get_or_create(
        username="maria",
        defaults={'password': '123456'}
    )
    if created:
        print("- UsuÃ¡rio 'maria' criado")
    
    user3, created = User.objects.get_or_create(
        username="admin",
        defaults={'password': 'admin123'}
    )
    if created:
        print("- UsuÃ¡rio 'admin' criado")
    
    # Criar tarefas de exemplo
    print("\nCriando tarefas de exemplo...")
    
    tarefas_exemplo = [
        {
            'title': 'Implementar sistema de login',
            'description': 'Desenvolver funcionalidade de autenticaÃ§Ã£o de usuÃ¡rios com validaÃ§Ã£o de senha e controle de sessÃ£o.',
            'user': user1,
            'status': status_concluida
        },
        {
            'title': 'Criar dashboard administrativo',
            'description': 'Desenvolver interface para visualizar todas as tarefas do sistema com estatÃ­sticas e filtros.',
            'user': user1,
            'status': status_andamento
        },
        {
            'title': 'Implementar responsividade',
            'description': 'Adaptar todas as telas para funcionar corretamente em dispositivos mÃ³veis.',
            'user': user2,
            'status': status_pendente
        },
        {
            'title': 'Otimizar performance do banco',
            'description': 'Revisar queries e adicionar Ã­ndices para melhorar performance das consultas.',
            'user': user2,
            'status': status_pendente
        },
        {
            'title': 'Documentar API',
            'description': 'Criar documentaÃ§Ã£o completa das funcionalidades e endpoints do sistema.',
            'user': user3,
            'status': status_andamento
        },
        {
            'title': 'Implementar testes unitÃ¡rios',
            'description': 'Desenvolver suite de testes para garantir qualidade do cÃ³digo.',
            'user': user3,
            'status': status_pendente
        },
        {
            'title': 'Configurar deploy em produÃ§Ã£o',
            'description': 'Configurar servidor de produÃ§Ã£o e automatizar processo de deploy.',
            'user': user1,
            'status': status_concluida
        },
        {
            'title': 'Implementar notificaÃ§Ãµes por email',
            'description': 'Adicionar sistema de notificaÃ§Ãµes automÃ¡ticas quando tarefas sÃ£o atribuÃ­das ou atualizadas.',
            'user': user2,
            'status': status_andamento
        }
    ]
    
    for tarefa_data in tarefas_exemplo:
        tarefa, created = Task.objects.get_or_create(
            title=tarefa_data['title'],
            defaults={
                'description': tarefa_data['description'],
                'user': tarefa_data['user'],
                'status': tarefa_data['status']
            }
        )
        if created:
            print(f"- Tarefa '{tarefa_data['title']}' criada para {tarefa_data['user'].username}")
    
    print(f"\nâœ… Banco de dados populado com sucesso!")
    print(f"ğŸ“Š Total de usuÃ¡rios: {User.objects.count()}")
    print(f"ğŸ“‹ Total de tarefas: {Task.objects.count()}")
    print(f"ğŸ“ˆ Total de status: {Status.objects.count()}")
    
    print("\nğŸ”‘ UsuÃ¡rios criados:")
    print("- joao / 123456")
    print("- maria / 123456") 
    print("- admin / admin123")

# Executar a funÃ§Ã£o
if __name__ == "__main__":
    populate_database()